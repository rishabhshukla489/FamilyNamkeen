{% comment %}
<!-- Designed by OnHOW YouTube Channel - Anas El Medlaoui -->
{% endcomment %}

{% assign onhow_minimum_order = 100.00 | times: 100 %}
{% assign onhow_cart_total = cart.total_price %}
{% assign onhow_remaining = onhow_minimum_order | minus: onhow_cart_total %}

{% comment %} Color customization - change these values as needed {% endcomment %}
{% assign onhow_icon_color = "#ff6b6b" %}
{% assign onhow_text_highlight_color = "#ff6b6b" %}

{% if onhow_cart_total < onhow_minimum_order and cart.item_count > 0 %}
<div class="onhow-min-order-wrapper page-width">
  <div class="onhow-min-order-alert">
    <div class="onhow-min-order-content">
      <div class="onhow-min-order-icon">
        <svg width="26" height="26" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="color: {{ onhow_icon_color }};">
          <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M12 8V12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M12 16H12.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </div>
      <div class="onhow-min-order-message">
        Add <span class="onhow-min-order-amount">{{ onhow_remaining | money }}</span> more to qualify for checkout
      </div>
    </div>
  </div>
</div>

<style>
  .onhow-min-order-wrapper {
    margin-top: -10px;
    margin-bottom: 1.5rem;
    font-family: var(--font-body-family);
    font-weight: var(--font-body-weight);
  }
  
  .onhow-min-order-alert {
    background: linear-gradient(to right, rgba(var(--color-base-accent-1), 0.05), rgba(var(--color-base-accent-2), 0.1));
    border: 1px solid rgba(var(--color-base-accent-1), 0.15);
    border-radius: 8px;
    padding: 1.2rem 1.5rem;
    box-shadow: 0 2px 10px rgba(var(--color-base-accent-1), 0.08);
    text-align: center;
  }
  
  .onhow-min-order-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .onhow-min-order-icon {
    margin-right: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .onhow-min-order-icon svg {
    width: 37px !important;
    height: 37px !important;
  }
  
  .onhow-min-order-message {
    font-size: 1.28rem;
    line-height: 1.3;
    margin: 0;
    font-weight: 500;
  }
  
  .onhow-min-order-amount {
    font-weight: 700;
    color: {{ onhow_text_highlight_color }};
    position: relative;
    display: inline-block;
  }
  
  .cart__checkout-button[disabled] {
    opacity: 0.65;
    cursor: not-allowed;
    background: rgba(var(--color-foreground), 0.1);
    color: rgba(var(--color-foreground), 0.6);
    border-color: transparent;
  }
  
  @media screen and (max-width: 749px) {
    .onhow-min-order-alert {
      padding: 1rem;
    }
    
    .onhow-min-order-message {
      font-size: 1.15rem;
    }
  }
</style>

<script>
  class OnhowMinOrderManager {
    constructor() {
      this.minimumAmount = {{ onhow_minimum_order }};
      this.checkoutButtons = document.querySelectorAll('[name="checkout"], .cart__checkout-button');
      this.initialize();
    }

    initialize() {
      if (this.checkoutButtons.length > 0) {
        this.disableCheckout();
        
        document.addEventListener('cart:refresh', (event) => {
          this.checkCartTotal();
        });
        
        const quantityInputs = document.querySelectorAll('input[name="updates[]"]');
        quantityInputs.forEach(input => {
          input.addEventListener('change', () => {
            setTimeout(() => this.checkCartTotal(), 300);
          });
        });
      }
    }
    
    checkCartTotal() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          if (cart.total_price >= this.minimumAmount) {
            this.enableCheckout();
          } else {
            this.disableCheckout();
          }
        });
    }

    disableCheckout() {
      this.checkoutButtons.forEach(button => {
        button.setAttribute('disabled', 'disabled');
        button.classList.add('onhow-checkout-disabled');
      });
    }

    enableCheckout() {
      this.checkoutButtons.forEach(button => {
        button.removeAttribute('disabled');
        button.classList.remove('onhow-checkout-disabled');
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new OnhowMinOrderManager();
  });
</script>
{% endif %}